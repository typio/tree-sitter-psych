// Variables
number := 21
number = 73

// Constants
PI :: 3.14

string := "Hello"
LETTER_A : char : 'A'

arr := [1, 2, 3]
arr2d : [2, 3]i32 = [ 1, 2, 3,
                      4, 5, 6 ]

numbers_house : &i32 : &number
numbers_house.* = 43

add :: (a: i32, b: i32) -> i32 {
  return a + b
}

is_adult :: (n: i32) -> bool {
	match n {
		..<18 -> false,
		18... -> true,
	}
}

reduce :: (arr: []T, f: (T, T) -> T, init: T) -> T {
  if arr |> len > 0 {
    return f(reduce(arr[..<-1], f, init), arr[-1])
  } else {
    return init
  }
}

// Will compile error if called on types without "+" operator
sum :: (arr: []T) -> T {
  return reduce(arr, add, 0)
}

map_inplace :: (arr: []T, f: (T) -> T) -> empty {
  for &e in arr {
    e.* = f(e.*)
  }
}

map :: (arr: [N]T, f: (T) -> T) -> [N]T {
  // Uninitialized variable
  result : [N]
  for e, i in arr {
    result.i = f(e.*)
  }
  return result
}

magnify :: (arr: []T_Elements, multiplier: T_Multiplier) -> []T_Result {
  // Implicit comptime type if unspecified in function param, perhaps
  return arr |> map((m) -> m * multiplier)
}
